events {}

http {
    upstream flask_servers {
        # Define the Flask app instances with correct ports
        server app1:5000 max_fails=3 fail_timeout=30s;
        server app2:5001 max_fails=3 fail_timeout=30s;
        server app3:5002 max_fails=3 fail_timeout=30s;

        # Use round-robin load balancing (default)
        # Alternatively, you can use 'least_conn' for least connections strategy
        # least_conn;
    }

    server {
        listen 80;

        # Enable logging for debugging
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        location / {
            # Proxy pass to the upstream group
            proxy_pass http://flask_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # If a server fails, try the next one
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_connect_timeout 5s;
            proxy_read_timeout 5s;
        }

        # Health check endpoint for NGINX to verify service availability
        location /nginx_health {
            return 200 "NGINX is running\n";
        }

        # Optional: Proxy the Flask app health endpoint for manual debugging
        location /health {
            proxy_pass http://flask_servers/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}